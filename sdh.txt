# матрица расстояний (вставляем мой код из дома)
import random
import matplotlib.pyplot as plt
a=[[0,123,150,300,430,189],[123,0,300,458,967,321],[150,300,0,567,893,436],[300,458,567,0,562,132],[430,967,893,562,0,321],[189,321,436,132,321,0]]
q=100
for i in range(len(a)):
    for j in range(len(a[i])):
        if a[i][j]!=0:
            a[i][j]=q/a[i][j]
#Матрица которую мы получаем для счёта вероятности она является неизменяемой
#[[0, 0.8130081300813008, 0.6666666666666666, 0.3333333333333333, 0.23255813953488372, 0.5291005291005291],
#[0.8130081300813008, 0, 0.3333333333333333, 0.2183406113537118, 0.10341261633919338, 0.3115264797507788],
#[0.6666666666666666, 0.3333333333333333, 0, 0.1763668430335097, 0.11198208286674133, 0.22935779816513763],
#[0.3333333333333333, 0.2183406113537118, 0.1763668430335097, 0, 0.17793594306049823, 0.7575757575757576],
#[0.23255813953488372, 0.10341261633919338, 0.11198208286674133, 0.17793594306049823, 0, 0.3115264797507788],
#[0.5291005291005291, 0.3115264797507788, 0.22935779816513763, 0.7575757575757576, 0.3115264797507788, 0]]

# матрица феромонов
s = 6
ants=20# уравьи
Zero=[]
for i in range(s):
    m = [0] * s
    Zero.append(m)

print(Zero)
mas = [0.2] * s
for i in range(s): 
    mas[i] = [0.2] * s
B=1 #бета-зависимость от близости. 
A=1 #альфа - зависимость от ферамонов
BEST_DIST = float("inf")                # лучшая длина маршрута
BEST_ROUTE = None                       # лучший маршрут
antROUTE=[]
for i in range(s):
    md = [0] * ants
    antROUTE.append(md) # матрица маршрутов муравьев в одном поколении (номера узлов графа)
antDIST=[]
for i in range(ants):
    mdf = [0] * ants
    antDIST.append(mdf)       # вектор длины маршрута муравьев в одном поколении
antBEST_DIST = np.zeros(AGES)
for i in range(s):
    mdfl = [0] * s
    antBEST_DIST.append(mdfl) 


        
# дальше по вложенным массивам надо посчитать вероятность для каждой точки
Sum=0
for j in range(len(a[0])):
      print(a[0][j])
      Sum=Sum+(a[0][j]**B*float(mas[0][j])**A)
print(Sum)

i=0
for j in range(len(a[0])):
    lk=a[0][j]**B*float(mas[0][j])**A
    Zero[0][j]=lk/Sum
print(Zero)
for k in range(ants):
      antROUTE[k, 0] = k % s
      for t in range(1, s):
            from_city = int(antROUTE[k, t-1]) # текущее положение муравья
            P = (tao[from_city] ** a) * (rev_L[from_city] ** b)
            # вероятность посещения уже посещенных городов = 0
            for i in range(s):
                P[int(antROUTE[k, i])] = 0









# матрица расстояний (вставляем мой код из дома)
import random
import matplotlib.pyplot as plt
a=[[0,123,150,300,430,189],[123,0,300,458,967,321],[150,300,0,567,893,436],[300,458,567,0,562,132],[430,967,893,562,0,321],[189,321,436,132,321,0]]
q=100

for i in range(len(a)):
    for j in range(len(a[i])):
        if a[i][j]!=0:
            a[i][j]=q/a[i][j]
#Матрица которую мы получаем для счёта вероятности она является неизменяемой
#[[0, 0.8130081300813008, 0.6666666666666666, 0.3333333333333333, 0.23255813953488372, 0.5291005291005291],
#[0.8130081300813008, 0, 0.3333333333333333, 0.2183406113537118, 0.10341261633919338, 0.3115264797507788],
#[0.6666666666666666, 0.3333333333333333, 0, 0.1763668430335097, 0.11198208286674133, 0.22935779816513763],
#[0.3333333333333333, 0.2183406113537118, 0.1763668430335097, 0, 0.17793594306049823, 0.7575757575757576],
#[0.23255813953488372, 0.10341261633919338, 0.11198208286674133, 0.17793594306049823, 0, 0.3115264797507788],
#[0.5291005291005291, 0.3115264797507788, 0.22935779816513763, 0.7575757575757576, 0.3115264797507788, 0]]

# матрица феромонов
s = 6
ants=20# уравьи
Zero=[]
for i in range(s):
    m = [0] * s
    Zero.append(m)


mas = [0.2] * s
for i in range(s): 
    mas[i] = [0.2] * s
B=1 #бета-зависимость от близости. 
A=1 #альфа - зависимость от ферамонов
BEST_DIST = float("inf")                # лучшая длина маршрута
BEST_ROUTE = None                       # лучший маршрут
antROUTE=[]
for i in range(s):
    md = [0] * ants
    antROUTE.append(md) # матрица маршрутов муравьев в одном поколении (номера узлов графа)
antDIST=[]
for i in range(ants):
    mdf = [0] * ants
    antDIST.append(mdf)       # вектор длины маршрута муравьев в одном поколении
antBEST_DIST=[]
for i in range(s):
    mdfl = [0] * s
    antBEST_DIST.append(mdfl) 


        
# здесь мы считаем сумму всех вероятностей для каждой точки? Ну типа
kf=[]
for i in range(len(a)):
    ss=0
    Sum=0
    while ss<6:
        for j in range(len(a[i])):
            ss+=1
            Sum=Sum+(a[i][j]**B*float(mas[i][j])**A)
        kf.append(Sum)
        
#print(kf)
#Здесь мы будем считать вероятность для определённой точки
for i in range(len(a)):
    ds=0
    while ds<6:
        for j in range(len(a[i])):
            ds+=1
            lk=a[i][j]**B*float(mas[i][j])**A
            Zero[i][j]=lk/kf[i]
print(Zero)



kf=[]
for i in range(len(a)):
    ss=0
    Sum=0
    tr=a[i].index(0)
    lkg=6-tr
    while ss<lkg:
        for j in range(tr,len(a[i])):
            ss+=1
            Sum=Sum+(a[i][j]**B*float(mas[i][j])**A)
        if Sum!=0:
            kf.append(Sum)
        else:
            kf.append(1)
        
print(kf)
#Здесь мы будем считать вероятность для определённой точки
for i in range(len(a)):
    ds=0
    while ds<6:
        for j in range(len(a[i])):
            ds+=1
            lk=a[i][j]**B*float(mas[i][j])**A
            Zero[i][j]=lk/kf[i]
print(Zero)

for age in range(AGES):
    antROUTE.fill(0)
    antDIST.fill(0)
    for k in range(ants):
          antROUTE[k, 0] = k % s
           for t in range(1, CITIES):
            from_city = int(antROUTE[k, t-1])
            P = (a[from_city] ** A) * (mas[from_city] ** B)
            for i in range(s):
                  P[int(antROUTE[k, i])] = 0






# матрица расстояний (вставляем мой код из дома)
import random
import matplotlib.pyplot as plt
a=[[0,123,150,300,430,189],[123,0,300,458,967,321],[150,300,0,567,893,436],[300,458,567,0,562,132],[430,967,893,562,0,321],[189,321,436,132,321,0]]
q=100
ji=0.64
d=[]

for i in range(len(a)):
    for j in range(len(a[i])):
        if d[i][j]!=0:
            d[i][j]=1/a[i][j]
#Матрица которую мы получаем для счёта вероятности она является неизменяемой
#[[0, 0.8130081300813008, 0.6666666666666666, 0.3333333333333333, 0.23255813953488372, 0.5291005291005291],
#[0.8130081300813008, 0, 0.3333333333333333, 0.2183406113537118, 0.10341261633919338, 0.3115264797507788],
#[0.6666666666666666, 0.3333333333333333, 0, 0.1763668430335097, 0.11198208286674133, 0.22935779816513763],
#[0.3333333333333333, 0.2183406113537118, 0.1763668430335097, 0, 0.17793594306049823, 0.7575757575757576],
#[0.23255813953488372, 0.10341261633919338, 0.11198208286674133, 0.17793594306049823, 0, 0.3115264797507788],
#[0.5291005291005291, 0.3115264797507788, 0.22935779816513763, 0.7575757575757576, 0.3115264797507788, 0]]

# матрица феромонов
s = 6
ants=20# уравьи
Zero=[]
for i in range(s):
    m = [0] * s
    Zero.append(m)


mas = [0.2] * s
for i in range(s): 
    mas[i] = [0.2] * s
B=1 #бета-зависимость от близости. 
A=1 #альфа - зависимость от ферамонов
BEST_DIST = float("inf")                # лучшая длина маршрута
BEST_ROUTE = None                       # лучший маршрут
antROUTE=[]
for i in range(s):
    md = [0] * ants
    antROUTE.append(md) # матрица маршрутов муравьев в одном поколении (номера узлов графа)
    # вектор длины маршрута муравьев в одном поколении
antBEST_DIST=[]
for i in range(s):
    mdfl = [0] * s
    antBEST_DIST.append(mdfl) 


        
# здесь мы считаем сумму всех вероятностей для каждой точки? Ну типа
kf=[]
for i in range(len(d)):
    ss=0
    Sum=0
    while ss<6:
        for j in range(len(d[i])):
            ss+=1
            Sum=Sum+(d[i][j]**B*float(mas[i][j])**A)
        kf.append(Sum)
        
#print(kf)
#Здесь мы будем считать вероятность для определённой точки
for i in range(len(a)):
    ds=0
    while ds<6:
        for j in range(len(d[i])):
            ds+=1
            lk=d[i][j]**B*float(mas[i][j])**A
            Zero[i][j]=lk/kf[i]
print(Zero)


L=q/a[i][j]
for i in range(len(Zero)):
    Zero[i]=Zero[i]*ji+L






for age in range(AGES):
    antROUTE=[]
    for i in range(s):
        md = [0] * ants
        antROUTE.append(md) # матрица маршрутов муравьев в одном поколении (номера узлов графа)
    antDIST=[]
    for i in range(ants):
        mdf = [0] * ants
        antDIST.append(mdf)   
    for k in range(ants):
        
        
          #antROUTE[k, 0] = k % s
          # for t in range(1, CITIES):
          #  from_city = int(antROUTE[k, t-1])
          #  P = (a[from_city] ** A) * (mas[from_city] ** B)
          #  for i in range(s):
          #        P[int(antROUTE[k, i])] = 0



a=[[1,2,3,4,5],[2,3,4,5,6],[4,5,6,7,8],[6,7,8,9,10]]
Zero=[]
s=5
for i in range(s):
    m = [0] * s
    Zero.append(m)
hg=[]
A=1
B=1
d=[]
for i in range(s):
    k = [0] * s
    d.append(m)
kf=[]
ts=s-1


for i in range(len(a)):
    for j in range(len(a[i])):
        if d[i][j]!=0:
            d[i][j]=1/a[i][j]
mas = [0.2] * s
for i in range(s):
    mas[i] = [0.2] * s
antROUTE=[]
kf=[]
for k in range(s):
    from_city=k
    P = (mas[k][from_city] ** A) * (d[k][from_city] ** B)
    if k not in antROUTE:
        for i in range(len(a)):
            ss=0
            Sum=0
            while ss<ts:
                for j in range(len(d[i])):
                    ss+=1
                    Sum=Sum+(a[i][j]**B*float(mas[i][j])**A)
                kf.append(Sum)
        for i in range(len(a)):
            ds=0
            while ds<ts:
                for j in range(len(a[i])):
                    ds+=1
                    lk=a[i][j]**B*float(mas[i][j])**A
                    Zero[i][j]=lk/kf[i]
        ts-=1
        antROUTE.append(k)
